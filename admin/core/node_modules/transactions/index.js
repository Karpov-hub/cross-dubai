
/**
 * src: {collection:, _id:, field: value: }
 * dst: {collection:, _id:, value: }
 * 
 * transaction.state: {1: initial, 2: commited, 3: done, 4: cancel}
 * 
 */

var transactionsClean = function(txId, callback) {
    var db = this
        ,dt = new Date()
        ,canceledCount = 0
        ,finishedCount = 0;
    
    // remove canceled transaction, older than 20c
    dt = dt.setTime(dt.getTime() - 20000);
    
    [
        function(call) {
    
            // Select broken initial transactions 
            db.collection('transactions').find({state: 1, date: {$lt: dt}}, {_id:1}).toArray(function(e, data) {
                if(e) {
                    if(!!callback) callback(e)    
                } else {
                    call(data)
                }
            })
        }
        
        ,function(data, call) {
            var func = function(i) {
                if(i>=data.length) {
                    call()
                    return;
                }                
                db.transactionCancel(data[i]._id, function() {
                    canceledCount++
                    func(i+1)    
                })                
            }            
            func(0)    
        }
        
        // Select broken commited transactions 
        ,function(call) {
            db.collection('transactions').find({state: 2, date: {$lt: dt}}).toArray(function(e, data) {
                if(e) {
                    if(!!callback) callback(e)    
                } else{
                    call(data)
                }
            })
        }
        
        ,function(data, call) {
            var func = function(i) {
                if(i>=data.length) {
                    if(!!callback) callback(null, {success: true, canceled: canceledCount, finished: finishedCount})
                    return;
                }                
                db.collection(data[i].sCl).update({_id: data[i].sId}, {$pull: {tx: data[i]._id}}, function(e, d) {
                    if(e) {
                        if(!!callback) callback(e)
                    } else {
                        db.collection(data[i].dCl).update({_id: data[i].dId}, {$pull: {tx: data[i]._id}}, function(e, d) {
                            if(e) {
                                if(!!callback) callback(e)
                            } else {
                                db.collection('transactions').update({_id: data[i]._id}, {$set:{state: 3, date: new Date()}}, function(e, data) {
                                    finishedCount++;
                                    func(i+1)
                                })
                            }
                        })
                    }
                })
            }            
            func(0)    
        }
        
    ].runEach()
    
}
 
var transactionCancel = function(txId, callback) {
    var db = this;
    
    [
        function(call) {
            db.collection('transactions').findOne({_id: txId}, function(e, rec) {
                if(e) {
                    callback(null, {mess: 'Transaction is not found'})
                    return;
                }
                call(rec)
            })
        }
        
        ,function(rec, call) {
            var IncField = {}
            IncField[rec.sFl] = rec.val
            db.collection(rec.sCl).update({_id: rec.sId, tx: rec._id}, {$inc: IncField, $pull: {tx: rec._id}}, function(e, d) {  
                call(rec)
            })    
        }
        
        ,function(rec, call) {
            var IncField = {}
            IncField[rec.sFl] = -1*rec.val
            db.collection(rec.dCl).update({_id: rec.dId, tx: rec._id}, {$inc: IncField, $pull: {tx: rec._id}}, function(e, d) {  
                call(rec)
            })    
        }
        
        ,function(rec, call) {
            db.collection('transactions').update({_id: txId}, {$set: {state: 4}}, function(e, rec) {
                if(e || !rec) {
                    callback({mess: 'Transaction not canceled'})
                } else {
                    callback(null, {success: true})
                }
            })
        }
        
    ].runEach()
    
}

var transaction = function(src, dst, value, callback, descript) {    
    
    var db = this;    
    var txCancel = function(tid) {
        db.transactionCancel(tid, function() {             
            callback({mess: 'Can not create transaction'}, null) 
        })
    };
    
    [
        function(call) {
            db.collection('transactions').insert({
                sCl: src.collection, 
                sId: src._id,
                sFl: src.field,
                dCl: dst.collection, 
                dId: dst._id, 
                val: value, 
                date: new Date(), 
                state: 1,
                descript: descript
            }, function(e, d) {
                if(e) {
                    callback(null, {mess: 'Can not create transaction'})    
                } else {
                    call(d[0]._id)    
                }
            })       
        }
        
        ,function(tid, call) {            
            var srcIncField = {}
            srcIncField[src.field] = -1*value
 
            db.collection(src.collection).update({_id: src._id, tx: {$ne: tid}}, {$inc: srcIncField, $push: {tx: tid}}, function(e, d) {            
                if(e || !d) {
                    txCancel(tid)
                    return 
                }
                call(tid)                
            })
        }
        
        ,function(tid, call) {            
            var dstIncField = {}                
            dstIncField[dst.field] = value   
            
            db.collection(dst.collection).update({_id: dst._id, tx: {$ne: tid}}, {$inc: dstIncField, $push: {tx: tid}}, function(e, d) {
                if(e || !d) {
                    txCancel(tid)
                    return 
                }
                call(tid)
            })
        }
        
        ,function(tid, call) {
            db.collection('transactions').update({_id: tid}, {$set: {state: 2}}, function(e, d) {
                if(e || !d) {
                    txCancel(tid)
                    return
                }
                call(tid)
            })
        }
        
        ,function(tid, call) {
            db.collection(src.collection).update({_id: src._id}, {$pull: {tx: tid}}, function(e, d) {
                call(tid)
            })
        }
        
        ,function(tid, call) {
            db.collection(dst.collection).update({_id: dst._id}, {$pull: {tx: tid}}, function(e, d) {
                call(tid)
            })
        }
        
        ,function(tid, call) {
            db.collection('transactions').update({_id: tid}, {$set: {state: 3, date: new Date()}}, function(e, d) {
                callback(null, {success: true})
            })
        }       
        
    ].runEach()   
    
       
}


exports.init = function(db) {
    db.transaction = transaction 
    db.transactionCancel = transactionCancel
    db.transactionsClean = transactionsClean
    //transactionsClean()
}